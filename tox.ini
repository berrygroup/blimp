[pytest]
filterwarnings =
    ignore:the imp module is deprecated:DeprecationWarning
    ignore:'contextfilter':DeprecationWarning
    ignore:distutils:DeprecationWarning
    ignore:Please use `spmatrix`:DeprecationWarning
    ignore:Passing a schema to Validator.iter_errors:DeprecationWarning
    ignore:Please use:DeprecationWarning
    ignore:'plotting' is not a valid key!:SyntaxWarning

addopts = --cov=blimp

[doc8]
max-line-length = 120
ignore-path = .tox,docs/api,blimp.egg-info,dist,build
quiet = 1

[flake8]
per-file-ignores =
    */__init__.py: D104, F401, I252
    tests/*: D, PT019
    docs/*: D,B
    notebooks/*: E402, E501, D100
# E402 module level import not at top of file
# E501 line too long
# D104 Missing docstring in public package
# F401 ... imported but unused
# D100 Missing docstring in public module
# D200 One-line docstring should fit on one line with quotes
# G004 Logging statement uses f-string
# G003 Logging statement uses '+'

# D100 D100 Missing docstring in public module
# D107 Missing docstring in __init__
# B008 Do not perform function calls in argument defaults.
# W503 line break before binary operator
# D105 Missing docstring in magic method
# E203 whitespace before ':'
# P101 format string does contain unindexed parameters
# PT019 fixture _ensure_test_data without value is injected as parameter, use @pytest.mark.usefixtures instead

# docrep interferences:
# RST201 Block quote ends without a blank line; unexpected unindent.
# RST301 Unexpected indentation.
# RST306 Unknown target name:
# RST203 Definition list ends without a blank line; unexpected unindent.
ignore = E203, D200, D100, D107, G004, G003 #,B008,W503,D105,E203,P101,RST201,RST301,RST306,RST203
exclude =
    .git
    .tox
    build
    dist
    __pycache__
    setup.py
max_line_length = 120
filename = *.py
ban-relative-imports = true
rst-roles =
    mod
    class
    meth
    func
    attr
    paramref
    ref
    cite
rst-directives =
    envvar
    exception

[coverage:run]
omit = */__init__.py

[coverage:paths]
source =
    blimp
    */site-packages/blimp

[coverage:report]
show_missing = true
precision = 2
skip_empty = True
sort = Cover

[tox]
isolated_build = True
envlist =
    py310-{linux,macos}
    py39-{linux,macos}
    lint
    clean-docs
    readme
    check-docs
    docs
    covclean
    coverage
skip_missing_interpreters = true

[testenv]
platform =
    linux: linux
    macos: (osx|darwin)
deps =
    pytest
    pytest-xdist
    pytest-cov
    pytest-dependency
    nbconvert
    ipykernel
extras = interactive
usedevelop = true
commands =
    python -m pytest --cov --cov-append --cov-report=term-missing --cov-config={toxinidir}/tox.ini --ignore docs/ {posargs:-vv} {env:PYTEST_FLAGS:}

[testenv:lint]
description = Perform linting.
basepython = python3.10
deps = pre-commit>=2.16.0
skip_install = true
commands = pre-commit run --all-files {posargs:}  # --show-diff-on-failure

[testenv:covclean]
description = Clean coverage files.
deps = coverage
skip_install = True
commands = coverage erase

[testenv:coverage]
description = Report the coverage difference.
deps =
    coverage
    diff_cover
skip_install = true
depends = py310-{linux,macos}
parallel_show_output = True
commands =
    coverage report --omit="tox/*"
    coverage xml --omit="tox/*" -o {toxinidir}/coverage.xml
    diff-cover --compare-branch origin/master {toxinidir}/coverage.xml

[testenv:clean-docs]
description = Clean the documentation artifacts.
basepython = python3.10
deps =
skip_install = true
changedir = {toxinidir}/docs
whitelist_externals = make
allowlist_externals = make
commands = make clean

[testenv:check-docs]
description = Check whether the links in the documentation are valid.
basepython = python3.10
deps = -r{toxinidir}/docs/requirements.txt
skip_install = true
whitelist_externals = sphinx-build
commands =
    sphinx-build -W --keep-going -b spelling {toxinidir}/docs {toxinidir}/docs/_build/spellcheck
    sphinx-build -q -W --keep-going -b linkcheck {toxinidir}/docs {toxinidir}/docs/_build/linkcheck

[testenv:docs]
description = Build the documentation.
basepython = python3.10
skip_install = true
deps = -r{toxinidir}/docs/requirements.txt
whitelist_externals = sphinx-build
commands =
#    sphinx-apidoc -f -o {toxinidir}/docs {toxinidir}
    sphinx-build --color -b html {toxinidir}/docs {toxinidir}/docs/_build/html
    python -c 'import pathlib; print(f"Documentation is available under:", pathlib.Path(f"{toxinidir}") / "docs" / "_build" / "html" / "index.html")'

#[testenv:readme]
#description = Check if README renders on PyPI.
#basepython = python3.9
#deps = twine >= 1.12.1
#skip_install = true
#commands = pip wheel -q -w {envtmpdir}/build --no-deps .
#           twine check {envtmpdir}/build/*
