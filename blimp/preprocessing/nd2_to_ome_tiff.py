"""
Copyright 2022 (C) University of New South Wales
Original author:
Scott Berry <scott.berry@unsw.edu.au>
"""
#import os
#import re
#import logging
import numpy as np
#import pandas as pd
from pathlib import Path
from typing import List, Union, Pattern
from nd2reader import ND2Reader
from aicsimageio import AICSImage
from aicsimageio.writers import OmeTiffWriter
from aicsimageio.types import PhysicalPixelSizes
from blimp.utils import init_logging
#from blimp.preprocessing.operetta_parse_metadata import get_image_metadata, get_plate_metadata

def _nd2_to_ome_tiff(
    in_file_path : Union[str,Path],
    out_path : Union[str,Path],
    out_path_mip : Union[str,Path]=None):
    """
    Reads a set of images corresponding to a single imaging 
    site (field of view) from individual files on disk.

    Parameters
    ----------
    in_file_path
        Full path to the .nd2 image file
    out_path
        Full path to the folder for OME-TIFFs
    out_path_mips
        Full path to the folder z-projected OME-TIFFs
    Returns
    -------

    """
    images = ND2Reader(in_file_path)
    n_sites = images.sizes['v']
    
    images.bundle_axes = 'tczyx'
    images.iter_axes = 'v'
 
    for i, img in enumerate(images):
        
        out_file_path = Path(out_path) / Path(Path(in_file_path).stem + '_' + str(i+1).zfill(4) +'.ome.tiff')
        
        voxel_dimensions = _get_zyx_resolution(img.metadata)
        
        OmeTiffWriter.save(
            data = img,
            uri = out_file_path,
            dim_order="TCZYX",
            channel_names=img.metadata['channels'],
            physical_pixel_sizes=voxel_dimensions,
            parser='lxml')
        
        if (out_path_mip is not None):
            
            out_file_path_mip = Path(out_path_mip) / Path(Path(in_file_path).stem + '_' + str(i+1).zfill(4) +'.ome.tiff')
            
            OmeTiffWriter.save(
                data = np.max(img,axis=2,keepdims=True),
                uri = out_file_path_mip,
                dim_order="TCZYX",
                channel_names=img.metadata['channels'],
                physical_pixel_sizes=voxel_dimensions,
                parser='lxml')
    
    return(out_file_path)


def _get_zyx_resolution(
    image_metadata : dict) -> PhysicalPixelSizes:
    """
    Determines the z,y,x resolution from the metadata

    Parameters
    ----------
    image_metadata
        Metadata dict generated by ND2Reader

    Returns
    -------
    PhysicalPixelSizes
        AICSImage object for containing pixel dimensions
    """
    
    xy = image_metadata['pixel_microns']
    n_z = 1 + max([i for i in image_metadata['z_levels']])
    return(PhysicalPixelSizes(Z=(max(image_metadata['z_coordinates'][0:n_z]) - 
                                 min(image_metadata['z_coordinates'][0:n_z])) / (n_z - 1),
                              Y=image_metadata['pixel_microns'],
                              X=image_metadata['pixel_microns']))



if __name__ == "__main__":
    from argparse import ArgumentParser

    parser = ArgumentParser(prog="operetta_to_ome_tiff")

    parser.add_argument(
        "-i",
        "--in_path",
        help="directory containing the input files",
        required=True
    )

    parser.add_argument(
        "-o",
        "--out_path",
        help="directory to write the output files",
        required=True
    )

    parser.add_argument(
        "--image_format",
        default="TIFF",
        help="output format for images (currently only TIFF implemented)"
    )

    parser.add_argument(
        "-f",
        "--metadata_file",
        default="Index.idx.xml",
        help="name of the metadata file",
        required=True
    )
        
    parser.add_argument(
        "--batch",
        nargs=2,
        default=[1,0],
        help="""
            If files are processed as batches, provide the number of 
            batches and the current batch to be processed. Batches
            refer to the number of sites (fields-of-view) and batch
            numbers start at 0.
        """
    )
    
    parser.add_argument(
        "-s",
        "--save_metadata_files",
        default=False,
        action="store_true",
        help="flag to indicate that metadata files should be saved"
    )
    
    parser.add_argument(
        "-m", "--mip",
        default=False,
        action="store_true",
        help="whether to save maximum intensity projections"
    )

    args = parser.parse_args()

    operetta_to_ome_tiff(
        in_path=args.in_path,
        out_path=args.out_path,
        metadata_file=args.metadata_file,
        n_batches=args.batch[0],
        batch_id=args.batch[1],
        save_metadata_files=args.save_metadata_files,
        mip=args.mip
    )

